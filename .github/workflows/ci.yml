name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run Black formatter check
      run: |
        black --check src/ tests/
    
    - name: Run isort import checker
      run: |
        isort --check-only src/ tests/
    
    - name: Run Flake8 linter
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203
    
    - name: Run Pylint
      run: |
        pylint src/ || true  # Don't fail on warnings
    
    - name: Run MyPy type checker
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -ll
    
    - name: Check for security vulnerabilities
      run: |
        safety check || true  # Don't fail on warnings

  tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ --cov=src --cov-append --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  pr-validation:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          });
          
          const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);
          
          if (totalChanges > 500) {
            core.setFailed(`PR is too large: ${totalChanges} lines changed. Please break it into smaller PRs.`);
          }
          
          // Check if tests are included when source code is modified
          const hasSourceChanges = files.some(f => f.filename.startsWith('src/'));
          const hasTestChanges = files.some(f => f.filename.startsWith('tests/'));
          
          if (hasSourceChanges && !hasTestChanges) {
            core.warning('Source code modified without corresponding tests');
          }
    
    - name: Check commit messages
      run: |
        # Check if commits follow conventional commits format
        git log --format='%s' origin/main..HEAD | while read commit_msg; do
          if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|test|perf|build|ci|chore)(\(.+\))?: .+'; then
            echo "Invalid commit message format: $commit_msg"
            echo "Please use conventional commits format: type(scope): description"
            exit 1
          fi
        done

  build-docker:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t nfl-prediction:latest .
    
    - name: Run Docker container tests
      run: |
        docker run --rm nfl-prediction:latest python -m pytest tests/

  documentation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install -r requirements-dev.txt
    
    - name: Build documentation
      run: |
        cd docs
        make html || echo "Documentation build needs setup"
    
    - name: Check for broken links
      run: |
        # Add link checker here
        echo "Link checking would run here"
